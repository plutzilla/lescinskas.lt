name: Build and deploy lescinskas.lt website to staging

on:
  create:
    ref_type: tag

jobs:
  build:
    name: Build Jekyll website
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - run: mkdir src/.jekyll-cache
      - run: chmod 0777 src/.jekyll-cache
      - run: mkdir _site
      - run: chmod 0777 _site
      - name: Build using Jekyll Docker container
        uses: docker://jekyll/minimal:4
        with:
          args: jekyll build -s src -d _site --trace
      - name: Store built website
        uses: actions/upload-artifact@v2
        with:
          name: website-build
          path: _site
  minify:
    name: Minify website files
    needs: build
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Download built artifact
        uses: actions/download-artifact@v2
        with:
          name: website-build
          path: _site
      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: 13
      - name: Cache Node modules
        uses: actions/cache@v2
        env:
          cache-name: node-module-cache
        with:
          path: ~/.npm
          key: ${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
      - run: npm install
      - run: npx gulp
      - name: Store minified website
        uses: actions/upload-artifact@v2
        with:
          name: website-minified
          path: _site
  publish:
    name: Publish Docker image to GitHub Container Registry (GHCR)
    needs: [build, minify]
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Download minified website artifact
        uses: actions/download-artifact@v2
        with:
          name: website-minified
          path: _site
      - name: Push to GitHub Container Registry
        uses: docker/build-push-action@v1
        with:
          dockerfile: nginx.Dockerfile
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}
          registry: ghcr.io
          repository: plutzilla/lescinskas-lt-website
          tag_with_ref: true
  deploy-to-staging:
    name: Deploy to staging
    needs: [build, minify, publish]
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_TOKEN }}
      - name: Get kubeconfig
        run: doctl k8s cluster kubeconfig show do-k8s-lescinskas-lt-cluster > .kubeconfig
      - name: Get the tag version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      - name: Start deployment
        uses: bobheadxi/deployments@master
        id: deployment
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          env: beta
      - name: Deploy using helm
        uses: docker://alpine/helm:3.3.1
        with:
          # entrypoint: helm
          args: >
            upgrade
            --install
            --kubeconfig=.kubeconfig
            -f ./deploy/helm/beta-lescinskas-lt.values.yaml
            --set image.repository=ghcr.io/plutzilla/lescinskas-lt-website
            --set image.tag=${{ steps.get_version.outputs.VERSION }}
            beta-lescinskas-lt
            ./deploy/helm/lescinskas.lt
      - name: Update deployment status
        uses: bobheadxi/deployments@master
        if: always()
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ job.status }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
